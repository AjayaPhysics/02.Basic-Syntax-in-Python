# Basic Syntax in Python

| **Concept**                 | **Description**                                                                                                                                                            | **Example**                          |
|-----------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------|
| **Case Sensitivity**        | Python is case-sensitive, meaning `variable` and `Variable` are treated as two different identifiers.                                                                      | `name = "Alice"` vs `Name = "Bob"` |
| **Indentation**             | Python uses indentation to define code blocks. Indentation is mandatory and replaces braces used in other languages.                                                       | ```python
if True:
    print("Hello")
```                                |
| **Comments**                | Comments start with a `#` for single-line comments and triple quotes (`'''` or `"""`) for multi-line comments.                                                            | `# This is a comment`               |
| **Variables**               | Variables are used to store data and do not require explicit declaration.                                                                                                  | `x = 10`                            |
| **Keywords**                | Reserved words in Python that cannot be used as variable names, like `if`, `else`, `while`.                                                                                 | `if x > 5:`                         |
| **Print Statement**         | Used to display output to the console.                                                                                                                                    | `print("Hello, World!")`           |
| **Input Statement**         | Used to take user input from the console.                                                                                                                                | `name = input("Enter your name: ")`|
| **Comments Style**          | Single-line comments use `#`. Multi-line comments are surrounded by triple quotes.                                                                                       | ```python
# Single-line comment
"""
Multi-line comment
"""
```                            |
| **Dynamic Typing**          | Python is dynamically typed, meaning variable types are determined at runtime.                                                                                             | `x = 5` (int), `x = "Hi"` (str)   |
| **Semicolons**              | Python does not require semicolons to terminate statements, though they can be used optionally.                                                                             | `print("Hello")`                   |
| **Whitespace**              | Excess whitespace between statements is ignored, but indentation within code blocks must be consistent.                                                                     | `y = 5` (valid)                     |
| **Quotation Marks**         | Strings can be defined using single (`'`) or double (`"`) quotes.                                                                                                          | `'Python'` or `"Python"`          |
| **Escape Characters**       | Special characters in strings, such as newlines (`\n`) or tabs (`\t`), are represented using escape sequences.                                                            | `"Hello\nWorld"`                  |
| **Identifiers**             | Names for variables, functions, and objects must start with a letter or underscore, followed by letters, numbers, or underscores.                                           | `my_var = 10`                       |
| **Arithmetic Operators**    | Operators like `+`, `-`, `*`, `/`, `**` (exponentiation), `%` (modulo), and `//` (floor division) are supported.                                                           | `x = 5 + 3`                         |
| **Boolean Values**          | Python supports `True` and `False` as boolean values.                                                                                                                      | `x = True`                          |
| **Built-in Functions**      | Functions like `len()`, `type()`, `str()`, `int()`, and `float()` are readily available.                                                                                   | `print(len("Hello"))`              |
| **Control Structures**      | Python uses `if`, `elif`, and `else` for conditional execution, and loops like `for` and `while` for repeated execution.                                                     | ```python
if x > 0:
    print("Positive")
else:
    print("Non-positive")
``` |
| **Function Syntax**         | Functions are defined using the `def` keyword, followed by the function name and parameters in parentheses.                                                                   | ```python
def greet(name):
    return f"Hello, {name}!"
``` |
| **Class Syntax**            | Classes are defined using the `class` keyword, with attributes and methods defined inside.                                                                                   | ```python
class Dog:
    def __init__(self, name):
        self.name = name
``` |
| **Importing Modules**       | Use the `import` keyword to include external modules or packages in your code.                                                                                            | ```python
import math
print(math.sqrt(4))
``` |
| **Error Handling**          | Use `try`, `except`, and `finally` to handle exceptions gracefully.                                                                                                        | ```python
try:
    x = 10 / 0
except ZeroDivisionError:
    print("Cannot divide by zero")
``` |
| **Lambda Functions**        | Anonymous functions can be created using the `lambda` keyword.                                                                                                             | `square = lambda x: x * x`          |
| **List Comprehensions**     | A concise way to create lists based on existing lists.                                                                                                                    | `[x * x for x in range(5)]`         |
| **Decorators**              | Functions that modify the behaviour of other functions.                                                                                                                    | ```python
def decorator(func):
    def wrapper():
        print("Before")
        func()
        print("After")
    return wrapper
``` |
